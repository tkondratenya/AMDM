@model AMDM.WEB.Models.PerformerViewModel

@{
    ViewBag.Title = "Performer";
}

<h2>@Model.Name</h2>
<img src="@Model.ImageLink" style="height: 66px; width:66px;">
<div class="performer-container">
    <hr />
    <div>
        <h4>Биография</h4>
        <p>@Model.BiographyText</p>
    </div>

    <div><h4>Подборы аккордов</h4></div>
    <div class="div-songtable">
        <div class="div-songtable-row-header">
            <div class="div-songtable-col1">Название композиции</div>
            <div class="div-songtable-col2" align="center">Видео</div>
            <div id="views-sort" class="div-songtable-col3" align="center">Просмотров</div>
        </div>
        @foreach (AMDM.WEB.Models.SongViewModel s in Model.Songs)
        {
            <div class="div-songtable-row">
                <div class="div-songtable-col1">
                    <a href="@s.SongPageLink">@s.Name</a>
                </div>
                <div class="div-songtable-col2" align="center">
                    @if (@s.VideoLink.StartsWith("http:/"))
                    {
                        <span class="glyphicon glyphicon-film" aria-hidden="true"></span>
                    }
                </div>
                <div class="div-songtable-col3" align="center">
                    @s.Views
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $('#views-sort').click(function () {
                var cl = $(this).attr("class");
                $(".div-songtable-row").detach().sort(function (a, b) {
                    var str1 = parseInt($(a).find('.' + cl).text(), 10);
                    var str2 = parseInt($(b).find('.' + cl).text(), 10);
                    return str1 > str2 ? -1 : 1;
                }).appendTo($(".div-songtable"));
            });

        jQuery.fn.sortElements = (function () {
            var sort = [].sort;
            return function (comparator, getSortable) {
                getSortable = getSortable || function () { return this; };
                var placements = this.map(function () {
                    var sortElement = getSortable.call(this),
                        parentNode = sortElement.parentNode,
                        // Since the element itself will change position, we have
                        // to have some way of storing it's original position in
                        // the DOM. The easiest way is to have a 'flag' node:
                        nextSibling = parentNode.insertBefore(
                            document.createTextNode(''),
                            sortElement.nextSibling
                        );
                    return function () {
                        if (parentNode === this) {
                            throw new Error(
                                "You can't sort elements if any one is a descendant of another."
                            );
                        }
                        // Insert before flag:
                        parentNode.insertBefore(this, nextSibling);
                        // Remove flag:
                        parentNode.removeChild(nextSibling);
                    };
                });
                return sort.call(this, comparator).each(function (i) {
                    placements[i].call(getSortable.call(this));
                });
            };
        })();
    </script>
}